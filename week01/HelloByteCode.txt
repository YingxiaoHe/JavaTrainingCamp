Classfile /D:/office/geek/git/JavaTrainingCamp/week01/src/HelloByteCode.class
  Last modified 2021-5-2; size 397 bytes
  MD5 checksum d036b0d871b75f67024453ee275e7bae
  Compiled from "HelloByteCode.java"
public class HelloByteCode
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #7.#17         // java/lang/Object."<init>":()V                  //由标号7和17常量组成，调用Object的构造方法
   #2 = Double             13.13d                                                           //double类型，值为13.13
   #4 = Double             10.0d                                                            //double类型，值为10.0
   #6 = Class              #18            // HelloByteCode                                  //由标号18常量组成，名字为HelloByteCode的类
   #7 = Class              #19            // java/lang/Object                               //由标号19常量组成，名字为Object的类
   #8 = Utf8               <init>                                                           //构造函数初始化
   #9 = Utf8               ()V                                                              //返回值类型为void类型
  #10 = Utf8               Code                                                             //
  #11 = Utf8               LineNumberTable                                                  //
  #12 = Utf8               main                                                             //主函数
  #13 = Utf8               ([Ljava/lang/String;)V                                           //参数为String，返回值为void的函数
  #14 = Utf8               StackMapTable                                                    //栈映射表
  #15 = Utf8               SourceFile                                                       //源文件
  #16 = Utf8               HelloByteCode.java                                               //名字为HelloByteCode的类
  #17 = NameAndType        #8:#9          // "<init>":()V                                   //由标号8和9常量组成，构造函数，返回值void
  #18 = Utf8               HelloByteCode                                                    //
  #19 = Utf8               java/lang/Object                                                 //
{
  public HelloByteCode();
    descriptor: ()V
    flags: ACC_PUBLIC                                                                       //公开类
    Code:
      stack=1, locals=1, args_size=1                                                        //栈长度为1，本地变量为1，参数大小为1
         0: aload_0                                                                         //将第一个引用类型本地变量压入栈顶
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V       //执行常量池标号1的命令
         4: return                                                                          //方法结束，没有返回值
      LineNumberTable:
        line 1: 0

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=6, args_size=1                                                        //栈长度为4，本地变量为6，参数大小为1
         0: iconst_3                                                                        //将int型、第4个常量压入栈顶。占用1个字节                                3
         1: istore_1                                                                        //将栈顶int型数值存入本地第2个变量。占用1个字节                           3
         2: ldc2_w        #2                  // double 13.13d                              //将double型（编号2）的常量从常量池压入栈顶。占用3个字节                   13.13
         5: dstore_2                                                                        //将栈顶double型数值存入本地第3个变量。占用1个字节                        13.13
         6: iload_1                                                                         //将int型第2个本地变量压入栈顶。占用1个字节                              3                   2                  1                  0                  -1                   -2                    -3                     -4
         7: bipush        -5                                                                //将单字节常量值（-5）压入栈顶。占用2个字节                              -5
         9: if_icmple     44                                                                //比较栈顶两个int值大小，当结果小于0时跳转到44行。占用3个字节               -5,3                -5,2               -5,1               -5,0               -5,-1                -5,-2                 -5,-3                  -5,-4                -5,-5
        12: iload_1                                                                         //将int型第2个本地变量压入栈顶。占用1个字节                              3                   2                  1                  0                  -1                   -2                    -3                     -4
        13: i2d                                                                             //将将栈顶int型转化为double型，并将结果压入栈顶。占用1个字节               3.0                 2.0                1.0                0.0                -1.0                  -2.0                 -3.0                   -4.0
        14: dload_2                                                                         //将double型第3个变量压入栈顶。占用1个字节                              13.13
        15: dadd                                                                            //将栈顶两个double型相加并压入栈顶。占用1个字节                          13.13+3.0=16.13     13.13+2.0=15.13    13.13+1.0=14.13    13.13+0.0=13.13    13.13+(-1.0)=12.13    13.13+(-2.0)=11.13    13.13+(-3.0)=10.13    13.13+(-4.0)=9.13
        16: ldc2_w        #4                  // double 10.0d                               //将double型（编号4）的常量从常量池压入栈顶。占用3个字节                   10.0
        19: dcmpl                                                                           //比较栈顶两个double型大小，并将结果压入栈顶。占用1个字节                  10.0,16.13          10.0,15.13         10.0,14.13         10.0,13.13         10.0,12.13            10.0,11.13            10.0,10.13            10.0,9.13
        20: ifle          32                                                                //当结果小于等于0时，跳转到32行。占用3个字节
        23: iload_1                                                                         //将int型第2个本地变量压入栈顶。占用1个字节                              3                   2                  1                  0                  -1                    -2                    -3
        24: i2d                                                                             //将将栈顶int型转化为double型，并将结果压入栈顶。占用1个字节               3.0                 2.0                1.0                0.0                -1.0                  -2.0                  -3.0
        25: dload_2                                                                         //将double型第3个变量压入栈顶。占用1个字节                              13.13
        26: ddiv                                                                            //将栈顶两个double型相除，并将结果压入栈顶。占用1个字节                    3.0/13.13           2.0/13.13          1.0/13.13          0.0/13.13          -1.0/13.13            -2.0/13.13            -3.0/13.13
        27: dstore        4                                                                 //将栈顶double型数值存入本地变量4这个位置。占用2个字节                    3.0/13.13           2.0/13.13          1.0/13.13          0.0                -1.0/13.13            -2.0/13.13            -3.0/13.13
        29: goto          38                                                                //跳转到第38行。占用3个字节
        32: iload_1                                                                         //将int型第2个本地变量压入栈顶。占用1个字节                              -4
        33: i2d                                                                             //将将栈顶int型转化为double型，并将结果压入栈顶。占用1个字节               -4.0
        34: dload_2                                                                         //将double型第3个变量压入栈顶。占用1个字节                              13.13
        35: dmul                                                                            //将栈顶两个double型相乘并将结果压入栈顶。占用1个字节                     13.13*(-4)=-52.52
        36: dstore        4                                                                 //将栈顶double型数值存入本地变量4这个位置。占用2个字节                    -52.52
        38: iinc          1, -1                                                             //将int型位置1的变量增加-1。占用3个字节                                3-1=2                2-1=1              1-1=0              0-1=-1             -1-1=-2               -2-1=-3               -3-1=-4               -4-1=-5
        41: goto          6                                                                 //跳转到第6行。占用3个字节
        44: return                                                                          //方法结束，没有返回值
      LineNumberTable:
        line 4: 0
        line 5: 2
        line 6: 6
        line 7: 12
        line 8: 23
        line 9: 29
        line 10: 32
        line 6: 38
        line 13: 44
      StackMapTable: number_of_entries = 4
        frame_type = 253 /* append */
          offset_delta = 6
          locals = [ int, double ]
        frame_type = 25 /* same */
        frame_type = 5 /* same */
        frame_type = 5 /* same */
}
SourceFile: "HelloByteCode.java"
